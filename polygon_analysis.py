#!/usr/bin/env python3
import nbformat as nbf

nb = nbf.v4.new_notebook()

# Header
nb.cells.append(nbf.v4.new_markdown_cell("""# –ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω VRP

–ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–∞ –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –∫—É—Ä—å–µ—Ä–æ–≤"""))

# Imports
nb.cells.append(nbf.v4.new_code_cell("""import sqlite3
import polars as pl
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from pathlib import Path
import json

print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")"""))

# Data Loading
nb.cells.append(nbf.v4.new_code_cell("""# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

# Orders
with open("ml_ozon_logistic/ml_ozon_logistic_dataSetOrders.json", 'r') as f:
    orders_data = json.load(f)
orders_df = pl.DataFrame(orders_data['Orders'], orient="row")

# Couriers
with open("ml_ozon_logistic/ml_ozon_logistic_dataSetCouriers.json", 'r') as f:
    couriers_data = json.load(f)
couriers_df = pl.DataFrame(couriers_data['Couriers'], orient="row")
warehouse_info = couriers_data['Warehouse']

print(f"‚úÖ –ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(orders_df)} –∑–∞–ø–∏—Å–µ–π")
print(f"‚úÖ –ö—É—Ä—å–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(couriers_df)} –∑–∞–ø–∏—Å–µ–π")
print(f"üè¢ –°–∫–ª–∞–¥: ID={warehouse_info['ID']}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã=({warehouse_info['Lat']:.4f}, {warehouse_info['Long']:.4f})")"""))

# Polygon Analysis - Diameter
nb.cells.append(nbf.v4.new_code_cell("""# –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–º–µ—Ç—Ä–∞ –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω–æ–≤
print("=== –ê–ù–ê–õ–ò–ó –î–ò–ê–ú–ï–¢–†–ê –ú–ò–ö–†–û–ü–û–õ–ò–ì–û–ù–û–í ===")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
db_path = "durations.sqlite"
conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω—ã
unique_polygons = orders_df.select('MpId').unique().to_series().to_list()
print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(unique_polygons)} –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω–æ–≤")

# –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
polygon_diameters = []

for mp_id in unique_polygons:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —ç—Ç–æ–º –ø–æ–ª–∏–≥–æ–Ω–µ
    polygon_orders = orders_df.filter(pl.col('MpId') == mp_id)
    order_ids = polygon_orders.select('ID').to_series().to_list()
    
    if len(order_ids) <= 1:
        # –û–¥–∏–Ω –∑–∞–∫–∞–∑ - –¥–∏–∞–º–µ—Ç—Ä = 0
        polygon_diameters.append({
            'mp_id': mp_id,
            'order_count': len(order_ids),
            'max_distance': 0,
            'avg_distance': 0,
            'min_distance': 0
        })
        continue
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
    placeholders = ','.join(['?' for _ in order_ids])
    query = f"SELECT f, t, d FROM dists WHERE f IN ({placeholders}) AND t IN ({placeholders}) AND f != t"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è IN clause (–¥–≤–∞–∂–¥—ã - –¥–ª—è f –∏ t)
    params = order_ids + order_ids
    
    cursor.execute(query, params)
    distances = cursor.fetchall()
    
    if distances:
        dist_values = [d[2] for d in distances]
        polygon_diameters.append({
            'mp_id': mp_id,
            'order_count': len(order_ids),
            'max_distance': max(dist_values),
            'avg_distance': sum(dist_values) / len(dist_values),
            'min_distance': min(dist_values)
        })
    else:
        polygon_diameters.append({
            'mp_id': mp_id,
            'order_count': len(order_ids),
            'max_distance': 0,
            'avg_distance': 0,
            'min_distance': 0
        })

# –°–æ–∑–¥–∞–µ–º DataFrame
diameters_df = pl.DataFrame(polygon_diameters, orient="row")
print(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –ø–æ–ª–∏–≥–æ–Ω—ã")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤
print(f"\\nüìè –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª–∏–≥–æ–Ω–æ–≤:")
print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä: {diameters_df['max_distance'].max()} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä: {diameters_df['max_distance'].mean():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –¥–∏–∞–º–µ—Ç—Ä–∞: {diameters_df['max_distance'].median():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä: {diameters_df['max_distance'].min()} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {diameters_df['max_distance'].std():.1f} —Å–µ–∫")

# –ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤
print(f"\\nüìà –ö–≤–∞–Ω—Ç–∏–ª–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤:")
for q in [0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99]:
    value = diameters_df['max_distance'].quantile(q)
    print(f"   ‚Ä¢ {q*100}%: {value:.1f} —Å–µ–∫")

conn.close()"""))

# Service Times Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
print("=== –ê–ù–ê–õ–ò–ó –°–ï–†–í–ò–°–ù–´–• –í–†–ï–ú–ï–ù ===")

# –°–æ–∑–¥–∞–µ–º DataFrame —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
service_times = []
for row in couriers_df.iter_rows(named=True):
    for service in row['ServiceTimeInMps']:
        service_times.append({
            'courier_id': row['ID'],
            'mp_id': service['MpID'],
            'service_time': service['ServiceTime']
        })

service_df = pl.DataFrame(service_times, orient="row")
print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω: {len(service_df)}")

# –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
print(f"\\n‚è±Ô∏è –û–±—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω:")
print(f"   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: {service_df['service_time'].min()} —Å–µ–∫")
print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {service_df['service_time'].max()} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {service_df['service_time'].mean():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞: {service_df['service_time'].median():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {service_df['service_time'].std():.1f} —Å–µ–∫")

# –ö–≤–∞–Ω—Ç–∏–ª–∏
print(f"\\nüìà –ö–≤–∞–Ω—Ç–∏–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω:")
for q in [0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99]:
    value = service_df['service_time'].quantile(q)
    print(f"   ‚Ä¢ {q*100}%: {value:.1f} —Å–µ–∫")

# –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º
print(f"\\nüöö –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º:")
courier_stats = service_df.group_by('courier_id').agg([
    pl.col('service_time').mean().alias('avg_service_time'),
    pl.col('service_time').std().alias('std_service_time'),
    pl.col('service_time').min().alias('min_service_time'),
    pl.col('service_time').max().alias('max_service_time'),
    pl.col('service_time').count().alias('polygon_count')
])

print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫—É—Ä—å–µ—Ä–∞: {courier_stats['avg_service_time'].mean():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞: {courier_stats['avg_service_time'].median():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –∫—É—Ä—å–µ—Ä–∞–º–∏: {courier_stats['avg_service_time'].std():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫—É—Ä—å–µ—Ä–∞: {courier_stats['max_service_time'].mean() - courier_stats['min_service_time'].mean():.1f} —Å–µ–∫")

# –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º
print(f"\\nüèòÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º:")
polygon_stats = service_df.group_by('mp_id').agg([
    pl.col('service_time').mean().alias('avg_service_time'),
    pl.col('service_time').std().alias('std_service_time'),
    pl.col('service_time').min().alias('min_service_time'),
    pl.col('service_time').max().alias('max_service_time'),
    pl.col('service_time').count().alias('courier_count')
])

print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω: {polygon_stats['avg_service_time'].mean():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω: {polygon_stats['avg_service_time'].median():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏: {polygon_stats['avg_service_time'].std():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω: {polygon_stats['max_service_time'].mean() - polygon_stats['min_service_time'].mean():.1f} —Å–µ–∫")"""))

# Visualizations - Diameter Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–º–µ—Ç—Ä–æ–≤
print("–°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–≤...")

# Convert to pandas for plotly
diameters_pd = diameters_df.to_pandas()

# 1. Distribution of polygon diameters
fig1 = go.Figure()
fig1.add_trace(go.Histogram(
    x=diameters_pd['max_distance'],
    nbinsx=50,
    name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–æ–≤',
    marker_color='lightblue'
))
fig1.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä–æ–≤ –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω–æ–≤",
                  xaxis_title="–î–∏–∞–º–µ—Ç—Ä (—Å–µ–∫—É–Ω–¥—ã)",
                  yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
fig1.show()

# 2. Diameter vs Order Count
fig2 = go.Figure()
fig2.add_trace(go.Scatter(
    x=diameters_pd['order_count'],
    y=diameters_pd['max_distance'],
    mode='markers',
    name='–î–∏–∞–º–µ—Ç—Ä vs –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤',
    marker=dict(size=5, color='red', opacity=0.6)
))
fig2.update_layout(title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–∏–∞–º–µ—Ç—Ä–∞ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤",
                  xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ",
                  yaxis_title="–î–∏–∞–º–µ—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞ (—Å–µ–∫—É–Ω–¥—ã)")
fig2.show()

# 3. Top 20 largest diameters
fig3 = go.Figure()
top_diameters = diameters_df.sort('max_distance', descending=True).head(20)
top_diameters_pd = top_diameters.to_pandas()
fig3.add_trace(go.Bar(
    x=top_diameters_pd['mp_id'],
    y=top_diameters_pd['max_distance'],
    name='–¢–æ–ø-20 –¥–∏–∞–º–µ—Ç—Ä–æ–≤',
    marker_color='orange'
))
fig3.update_layout(title="–¢–æ–ø-20 –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –¥–∏–∞–º–µ—Ç—Ä–æ–º",
                  xaxis_title="ID –ø–æ–ª–∏–≥–æ–Ω–∞",
                  yaxis_title="–î–∏–∞–º–µ—Ç—Ä (—Å–µ–∫—É–Ω–¥—ã)")
fig3.show()

# 4. Average vs Max distance in polygons
fig4 = go.Figure()
fig4.add_trace(go.Scatter(
    x=diameters_pd['avg_distance'],
    y=diameters_pd['max_distance'],
    mode='markers',
    name='–°—Ä–µ–¥–Ω–µ–µ vs –ú–∞–∫—Å–∏–º—É–º',
    marker=dict(size=5, color='green', opacity=0.6)
))
fig4.update_layout(title="–°—Ä–µ–¥–Ω–µ–µ vs –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –ø–æ–ª–∏–≥–æ–Ω–∞—Ö",
                  xaxis_title="–°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—Å–µ–∫—É–Ω–¥—ã)",
                  yaxis_title="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (—Å–µ–∫—É–Ω–¥—ã)")
fig4.show()"""))

# Visualizations - Service Times
nb.cells.append(nbf.v4.new_code_cell("""# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
print("–°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω...")

# Convert to pandas for plotly
service_pd = service_df.to_pandas()
courier_stats_pd = courier_stats.to_pandas()
polygon_stats_pd = polygon_stats.to_pandas()

# 1. Distribution of service times
fig5 = go.Figure()
fig5.add_trace(go.Histogram(
    x=service_pd['service_time'],
    nbinsx=100,
    name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω',
    marker_color='lightgreen'
))
fig5.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω",
                  xaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
                  yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
fig5.show()

# 2. Service times by courier
fig6 = go.Figure()
fig6.add_trace(go.Box(
    y=service_pd['service_time'],
    x=service_pd['courier_id'],
    name='–°–µ—Ä–≤–∏—Å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º',
    boxpoints='outliers'
))
fig6.update_layout(title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –ø–æ –∫—É—Ä—å–µ—Ä–∞–º",
                  xaxis_title="ID –∫—É—Ä—å–µ—Ä–∞",
                  yaxis_title="–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)")
fig6.show()

# 3. Average service time by courier
fig7 = go.Figure()
fig7.add_trace(go.Bar(
    x=courier_stats_pd['courier_id'],
    y=courier_stats_pd['avg_service_time'],
    name='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫—É—Ä—å–µ—Ä–∞',
    marker_color='purple'
))
fig7.update_layout(title="–°—Ä–µ–¥–Ω–µ–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –∫—É—Ä—å–µ—Ä–∞–º",
                  xaxis_title="ID –∫—É—Ä—å–µ—Ä–∞",
                  yaxis_title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)")
fig7.show()

# 4. Service time variation by polygon
fig8 = go.Figure()
fig8.add_trace(go.Scatter(
    x=polygon_stats_pd['avg_service_time'],
    y=polygon_stats_pd['std_service_time'],
    mode='markers',
    name='–°—Ä–µ–¥–Ω–µ–µ vs –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
    marker=dict(size=5, color='brown', opacity=0.6)
))
fig8.update_layout(title="–í–∞—Ä–∏–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º",
                  xaxis_title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)",
                  yaxis_title="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (—Å–µ–∫—É–Ω–¥—ã)")
fig8.show()"""))

# Summary Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
print("=== –°–í–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó ===")

print(f"üìä –î–ò–ê–ú–ï–¢–†–´ –ü–û–õ–ò–ì–û–ù–û–í:")
print(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –¥–∏–∞–º–µ—Ç—Ä–æ–º > 1000 —Å–µ–∫: {(diameters_df['max_distance'] > 1000).sum()}")
print(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –¥–∏–∞–º–µ—Ç—Ä–æ–º > 2000 —Å–µ–∫: {(diameters_df['max_distance'] > 2000).sum()}")
print(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –¥–∏–∞–º–µ—Ç—Ä–æ–º > 5000 —Å–µ–∫: {(diameters_df['max_distance'] > 5000).sum()}")

print(f"\\n‚è±Ô∏è –°–ï–†–í–ò–°–ù–´–ï –í–†–ï–ú–ï–ù–ê:")
print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º > 100 —Å–µ–∫: {(service_df['service_time'] > 100).sum()}")
print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º > 200 —Å–µ–∫: {(service_df['service_time'] > 200).sum()}")
print(f"   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å –≤—Ä–µ–º–µ–Ω–µ–º > 300 —Å–µ–∫: {(service_df['service_time'] > 300).sum()}")

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª–∏–≥–æ–Ω—ã
critical_polygons = diameters_df.filter(pl.col('max_distance') > 2000)
if len(critical_polygons) > 0:
    print(f"\\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–õ–ò–ì–û–ù–´ (–¥–∏–∞–º–µ—Ç—Ä > 2000 —Å–µ–∫):")
    print(critical_polygons.sort('max_distance', descending=True).head(10))

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
problematic_times = service_df.filter(pl.col('service_time') > 200)
if len(problematic_times) > 0:
    print(f"\\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–ï–†–í–ò–°–ù–´–ï –í–†–ï–ú–ï–ù–ê (> 200 —Å–µ–∫):")
    print(problematic_times.sort('service_time', descending=True).head(10))

print(f"\\nüéØ –í–´–í–û–î–´:")
print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–º–µ—Ç—Ä –ø–æ–ª–∏–≥–æ–Ω–∞: {diameters_df['max_distance'].mean():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ –≤—Ä–µ–º—è: {service_df['service_time'].mean():.1f} —Å–µ–∫")
print(f"   ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–∏–∞–º–µ—Ç—Ä/—Å–µ—Ä–≤–∏—Å: {diameters_df['max_distance'].mean() / service_df['service_time'].mean():.1f}")"""))

# Save notebook
nbf.write(nb, 'polygon_analysis.ipynb')
print("‚úÖ –ù–æ—É—Ç–±—É–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω: polygon_analysis.ipynb")
