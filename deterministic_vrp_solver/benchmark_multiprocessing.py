#!/usr/bin/env python3
"""
–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ threading vs multiprocessing
"""

import time
import psutil
import logging
from multiprocessing import cpu_count
import polars as pl
from polygon_optimizer import (
    optimize_all_polygons, 
    optimize_all_polygons_mp, 
    optimize_all_polygons_hybrid
)
from utils import load_orders_data_lazy, aggregate_orders_by_polygon_lazy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_system_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    return {
        'cpu_count': cpu_count(),
        'memory_total': psutil.virtual_memory().total / 1024 / 1024 / 1024,  # GB
        'memory_available': psutil.virtual_memory().available / 1024 / 1024 / 1024,  # GB
    }

def benchmark_approach(approach_name: str, func, *args, **kwargs):
    """–ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞"""
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥: {approach_name}")
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏ –ø–∞–º—è—Ç—å
    start_time = time.time()
    start_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
    start_cpu = psutil.cpu_percent(interval=1)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    result = func(*args, **kwargs)
    
    end_time = time.time()
    end_memory = psutil.Process().memory_info().rss / 1024 / 1024  # MB
    end_cpu = psutil.cpu_percent(interval=1)
    
    execution_time = end_time - start_time
    memory_used = end_memory - start_memory
    cpu_usage = (start_cpu + end_cpu) / 2
    
    logger.info(f"‚úÖ {approach_name}:")
    logger.info(f"   –í—Ä–µ–º—è: {execution_time:.2f} —Å–µ–∫")
    logger.info(f"   –ü–∞–º—è—Ç—å: {memory_used:.1f} MB")
    logger.info(f"   CPU: {cpu_usage:.1f}%")
    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result)}")
    
    return {
        'approach': approach_name,
        'time': execution_time,
        'memory': memory_used,
        'cpu': cpu_usage,
        'results_count': len(result)
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ multiprocessing vs threading")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    system_info = get_system_info()
    logger.info(f"üíª –°–∏—Å—Ç–µ–º–∞: {system_info['cpu_count']} CPU, {system_info['memory_total']:.1f} GB RAM")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    orders_lf = load_orders_data_lazy("../ml_ozon_logistic/ml_ozon_logistic_dataSetOrders.json")
    polygon_stats = aggregate_orders_by_polygon_lazy(orders_lf)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 –ø–æ–ª–∏–≥–æ–Ω–æ–≤)
    test_polygons = polygon_stats.head(50)
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_polygons)} –ø–æ–ª–∏–≥–æ–Ω–∞—Ö")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    db_path = "../durations.sqlite"
    service_times = {1: {order_id: 300 for order_id in range(1, 1000)}}  # –ó–∞–≥–ª—É—à–∫–∞
    
    results = []
    
    # –¢–µ—Å—Ç 1: Threading (—Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥)
    try:
        result1 = benchmark_approach(
            "Threading (ThreadPoolExecutor)",
            optimize_all_polygons,
            test_polygons, None, service_times, max_workers=4
        )
        results.append(result1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ threading —Ç–µ—Å—Ç–µ: {e}")
    
    # –¢–µ—Å—Ç 2: Multiprocessing
    try:
        result2 = benchmark_approach(
            "Multiprocessing (Pool)",
            optimize_all_polygons_mp,
            test_polygons, db_path, service_times, max_workers=cpu_count()
        )
        results.append(result2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ multiprocessing —Ç–µ—Å—Ç–µ: {e}")
    
    # –¢–µ—Å—Ç 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    try:
        result3 = benchmark_approach(
            "–ì–∏–±—Ä–∏–¥–Ω—ã–π (Multiprocessing + Threading)",
            optimize_all_polygons_hybrid,
            test_polygons, db_path, service_times, max_workers=cpu_count()
        )
        results.append(result3)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if len(results) > 1:
        logger.info("üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        best_time = min(results, key=lambda x: x['time'])
        logger.info(f"üèÜ –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {best_time['approach']} ({best_time['time']:.2f} —Å–µ–∫)")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å threading
        threading_result = next((r for r in results if 'Threading' in r['approach']), None)
        if threading_result:
            for result in results:
                if 'Threading' not in result['approach']:
                    speedup = threading_result['time'] / result['time']
                    logger.info(f"‚ö° {result['approach']}: {speedup:.2f}x –±—ã—Å—Ç—Ä–µ–µ threading")
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        logger.info("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:")
        for result in results:
            efficiency = result['results_count'] / result['time']
            logger.info(f"   {result['approach']}: {efficiency:.1f} –ø–æ–ª–∏–≥–æ–Ω–æ–≤/—Å–µ–∫")
    
    logger.info("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
