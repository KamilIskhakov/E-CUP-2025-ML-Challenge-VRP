"""
–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–∞—Ç–µ–ª–µ–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤
"""

import logging
from typing import Dict, List
import polars as pl
from interfaces import IPolygonAssignmentSolver, IDistanceProvider

logger = logging.getLogger(__name__)

class AssignmentSolverFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–∞—Ç–µ–ª–µ–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    
    @staticmethod
    def create_solver(solver_type: str, distance_provider: IDistanceProvider, 
                     warehouse_id: int = 1, courier_service_times: Dict[int, Dict[int, int]] = None, **kwargs) -> IPolygonAssignmentSolver:
        """
        –°–æ–∑–¥–∞—Ç—å —Ä–µ—à–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        
        Args:
            solver_type: –¢–∏–ø —Ä–µ—à–∞—Ç–µ–ª—è ('ortools', 'pyomo', 'heuristic', 'hybrid', 'dynamic', 'smart_dynamic')
            distance_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
            warehouse_id: ID —Å–∫–ª–∞–¥–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, solver_name –¥–ª—è Pyomo)
        
        Returns:
            –†–µ—à–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        """
        if solver_type == 'ortools':
            try:
                from ortools_solver import ORToolsAssignmentSolver
                return ORToolsAssignmentSolver(distance_provider, warehouse_id)
            except ImportError:
                logger.warning("OR-Tools –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
                from heuristic_solver import HeuristicAssignmentSolver
                return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'pyomo':
            try:
                from pyomo_solver import PyomoAssignmentSolver
                solver_name = kwargs.get('solver_name', 'cbc')
                return PyomoAssignmentSolver(distance_provider, warehouse_id, solver_name)
            except ImportError:
                logger.warning("Pyomo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
                from heuristic_solver import HeuristicAssignmentSolver
                return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'heuristic':
            from heuristic_solver import HeuristicAssignmentSolver
            return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'hybrid':
            try:
                from hybrid_solver import HybridAssignmentSolver
                return HybridAssignmentSolver(distance_provider, warehouse_id)
            except ImportError:
                logger.warning("HybridSolver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
                from heuristic_solver import HeuristicAssignmentSolver
                return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'pyomo_hybrid':
            try:
                from pyomo_hybrid_solver import PyomoHybridAssignmentSolver
                return PyomoHybridAssignmentSolver(distance_provider, warehouse_id, **kwargs)
            except ImportError:
                logger.warning("PyomoHybridSolver –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
                from heuristic_solver import HeuristicAssignmentSolver
                return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'dynamic':
            try:
                from dynamic_scheduler import DynamicScheduler
                return DynamicAssignmentSolver(distance_provider, warehouse_id)
            except ImportError:
                logger.warning("DynamicScheduler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
                from heuristic_solver import HeuristicAssignmentSolver
                return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'smart_dynamic':
            try:
                from smart_dynamic_scheduler import SmartDynamicScheduler
                return SmartDynamicAssignmentSolver(distance_provider, warehouse_id)
            except ImportError:
                logger.warning("SmartDynamicScheduler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
                from heuristic_solver import HeuristicAssignmentSolver
                return HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
        
        elif solver_type == 'reinforcement':
            try:
                from reinforcement_scheduler import ReinforcementScheduler
                return ReinforcementAssignmentSolver(
                    distance_provider, warehouse_id, courier_service_times
                )
            except ImportError as e:
                logger.error(f"ReinforcementScheduler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                raise
        
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ—à–∞—Ç–µ–ª—è: {solver_type}")

class DynamicAssignmentSolver(IPolygonAssignmentSolver):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    def __init__(self, distance_provider: IDistanceProvider, warehouse_id: int = 1):
        self.distance_provider = distance_provider
        self.warehouse_id = warehouse_id
        from dynamic_scheduler import DynamicScheduler
        self.scheduler = DynamicScheduler(distance_provider, warehouse_id)
    
    def solve(self, polygons_df: pl.DataFrame, couriers_df: pl.DataFrame, 
              max_time_per_courier: int = 43200) -> Dict[int, List[int]]:
        """–†–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        return self.scheduler.schedule_polygons(polygons_df, couriers_df, max_time_per_courier)

class SmartDynamicAssignmentSolver(IPolygonAssignmentSolver):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–º–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    
    def __init__(self, distance_provider: IDistanceProvider, warehouse_id: int = 1):
        self.distance_provider = distance_provider
        self.warehouse_id = warehouse_id
        from smart_dynamic_scheduler import SmartDynamicScheduler
        self.scheduler = SmartDynamicScheduler(distance_provider, warehouse_id)
    
    def solve(self, polygons_df: pl.DataFrame, couriers_df: pl.DataFrame, 
              max_time_per_courier: int = 43200) -> Dict[int, List[int]]:
        """–†–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        return self.scheduler.schedule_polygons(polygons_df, couriers_df, max_time_per_courier)

class ReinforcementAssignmentSolver(IPolygonAssignmentSolver):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self, distance_provider: IDistanceProvider, warehouse_id: int = 1,
                 courier_service_times: Dict[int, Dict[int, int]] = None):
        self.distance_provider = distance_provider
        self.warehouse_id = warehouse_id
        self.courier_service_times = courier_service_times or {}
    
    def solve(self, polygons_df: pl.DataFrame, couriers_df: pl.DataFrame, 
              max_time_per_courier: int = 43200) -> Dict[int, List[int]]:
        """–†–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
        logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º")
        
        from reinforcement_scheduler import ReinforcementScheduler
        
        scheduler = ReinforcementScheduler(
            polygons_df, couriers_df, max_time_per_courier,
            self.distance_provider, self.courier_service_times
        )
        
        return scheduler.solve(polygons_df, couriers_df, max_time_per_courier)

class HybridAssignmentSolver(IPolygonAssignmentSolver):
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å: —Å–Ω–∞—á–∞–ª–∞ OR-Tools, –ø–æ—Ç–æ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∞"""
    
    def __init__(self, distance_provider: IDistanceProvider, warehouse_id: int = 1, 
                 courier_service_times: Dict[int, Dict[int, int]] = None):
        self.distance_provider = distance_provider
        self.warehouse_id = warehouse_id
        self.courier_service_times = courier_service_times or {}
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–∞—Ç–µ–ª–∏
        try:
            self.ortools_solver = ORToolsAssignmentSolver(distance_provider, warehouse_id)
            self.heuristic_solver = HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
            self.use_ortools = True
        except ImportError:
            self.heuristic_solver = HeuristicAssignmentSolver(distance_provider, warehouse_id, courier_service_times)
            self.use_ortools = False
            logger.warning("OR-Tools –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
    
    def solve(self, polygons_df: pl.DataFrame, couriers_df: pl.DataFrame, 
              max_time_per_courier: int = 43200) -> Dict[int, List[int]]:
        """–ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        
        # –ü—Ä–æ–±—É–µ–º OR-Tools
        if self.use_ortools:
            logger.info("–ü—Ä–æ–±—É–µ–º OR-Tools...")
            ortools_result = self.ortools_solver.solve(polygons_df, couriers_df, max_time_per_courier)
            
            if ortools_result:
                assigned_count = sum(len(polygons) for polygons in ortools_result.values())
                logger.info(f"OR-Tools –Ω–∞–∑–Ω–∞—á–∏–ª {assigned_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
                
                # –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if assigned_count >= len(polygons_df) * 0.8:  # 80% –ø–æ–ª–∏–≥–æ–Ω–æ–≤
                    return ortools_result
                else:
                    logger.info("OR-Tools –Ω–∞–∑–Ω–∞—á–∏–ª –º–∞–ª–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å...")
        return self.heuristic_solver.solve_with_improvement(polygons_df, couriers_df, max_time_per_courier)

class PyomoHybridAssignmentSolver(IPolygonAssignmentSolver):
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å: —Å–Ω–∞—á–∞–ª–∞ Pyomo, –ø–æ—Ç–æ–º —ç–≤—Ä–∏—Å—Ç–∏–∫–∞"""
    
    def __init__(self, distance_provider: IDistanceProvider, warehouse_id: int = 1, **kwargs):
        self.distance_provider = distance_provider
        self.warehouse_id = warehouse_id
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–∞—Ç–µ–ª–∏
        try:
            solver_name = kwargs.get('solver_name', 'cbc')
            self.pyomo_solver = PyomoAssignmentSolver(distance_provider, warehouse_id, solver_name)
            self.heuristic_solver = HeuristicAssignmentSolver(distance_provider, warehouse_id)
            self.use_pyomo = True
        except ImportError:
            self.heuristic_solver = HeuristicAssignmentSolver(distance_provider, warehouse_id)
            self.use_pyomo = False
            logger.warning("Pyomo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —ç–≤—Ä–∏—Å—Ç–∏–∫—É")
    
    def solve(self, polygons_df: pl.DataFrame, couriers_df: pl.DataFrame, 
              max_time_per_courier: int = 43200) -> Dict[int, List[int]]:
        """–ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å Pyomo"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å Pyomo")
        
        # –ü—Ä–æ–±—É–µ–º Pyomo
        if self.use_pyomo:
            logger.info("–ü—Ä–æ–±—É–µ–º Pyomo...")
            pyomo_result = self.pyomo_solver.solve(polygons_df, couriers_df, max_time_per_courier)
            
            if pyomo_result:
                assigned_count = sum(len(polygons) for polygons in pyomo_result.values())
                logger.info(f"Pyomo –Ω–∞–∑–Ω–∞—á–∏–ª {assigned_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
                
                # –ï—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–∏–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if assigned_count >= len(polygons_df) * 0.8:  # 80% –ø–æ–ª–∏–≥–æ–Ω–æ–≤
                    return pyomo_result
                else:
                    logger.info("Pyomo –Ω–∞–∑–Ω–∞—á–∏–ª –º–∞–ª–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –ø—Ä–æ–±—É–µ–º —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Å —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–µ–π
                    relaxed_result = self.pyomo_solver.solve_with_relaxation(
                        polygons_df, couriers_df, max_time_per_courier
                    )
                    
                    if relaxed_result:
                        relaxed_count = sum(len(polygons) for polygons in relaxed_result.values())
                        logger.info(f"Pyomo (—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è) –Ω–∞–∑–Ω–∞—á–∏–ª {relaxed_count} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
                        
                        if relaxed_count >= len(polygons_df) * 0.8:
                            return relaxed_result
                        else:
                            logger.info("Pyomo —Å —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–µ–π –Ω–∞–∑–Ω–∞—á–∏–ª –º–∞–ª–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–≤—Ä–∏—Å—Ç–∏–∫–µ")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏–∫—É
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—à–∞—Ç–µ–ª—å...")
        return self.heuristic_solver.solve_with_improvement(polygons_df, couriers_df, max_time_per_courier)
