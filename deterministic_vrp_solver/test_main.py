#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ VRP –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –º–∏–∫—Ä–æ—Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import os
import sys
import time
import logging
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import polars as pl
from utils import (
    load_orders_data, load_couriers_data, get_distance_matrix,
    aggregate_orders_by_polygon, calculate_polygon_portal,
    calculate_polygon_statistics, filter_polygons_by_size, optimize_polygon_processing_order,
    load_orders_data_lazy, aggregate_orders_by_polygon_lazy
)
from polygon_optimizer import optimize_all_polygons, optimize_all_polygons_mp, optimize_all_polygons_hybrid
from distance_provider import SQLiteDistanceProvider
from solver_factory import AssignmentSolverFactory
from polygon_validator import PolygonValidator
from route_optimizer import optimize_courier_routes
from solution_generator import generate_solution

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('test_deterministic_vrp.log'),
            logging.StreamHandler()
        ]
    )
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ VRP —Å –º–∏–∫—Ä–æ—Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    start_time = time.time()
    
    try:
        # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º
        orders_file = Path("test_data/test_orders.json")
        couriers_file = Path("test_data/test_couriers.json")
        db_file = Path("test_data/test_durations.sqlite")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if not orders_file.exists():
            raise FileNotFoundError(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {orders_file}")
        if not couriers_file.exists():
            raise FileNotFoundError(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫—É—Ä—å–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {couriers_file}")
        if not db_file.exists():
            raise FileNotFoundError(f"–¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_file}")
        
        logger.info("=== –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º lazy API
        orders_lf = load_orders_data_lazy(str(orders_file))
        couriers_df, warehouse_info = load_couriers_data(str(couriers_file))
        conn = get_distance_matrix(str(db_file))
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(couriers_df)} –∫—É—Ä—å–µ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        distance_provider = SQLiteDistanceProvider(conn)
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –º–∏–∫—Ä–æ–ø–æ–ª–∏–≥–æ–Ω–∞–º (–ø–æ–ª–Ω–æ—Å—Ç—å—é lazy)
        polygon_stats = aggregate_orders_by_polygon_lazy(orders_lf)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        filtered_polygons = filter_polygons_by_size(polygon_stats, min_size=1, max_size=20)
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        optimized_polygon_order = optimize_polygon_processing_order(filtered_polygons)
        
        logger.info("=== –®–∞–≥ 2: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ ===")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
        orders_df = load_orders_data(str(orders_file))
        service_times = {}
        
        optimized_polygons = optimize_all_polygons_hybrid(
            optimized_polygon_order, 
            str(db_file), 
            service_times,
            max_workers=None
        )
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        polygon_validator = PolygonValidator(max_time_per_courier=43200)
        polygon_stats_info = polygon_validator.get_polygon_statistics(optimized_polygons)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        cost_distribution = polygon_validator.get_polygon_cost_distribution(optimized_polygons)
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤:")
        logger.info(f"   Q25: {cost_distribution['q25']:.0f} —Å–µ–∫")
        logger.info(f"   Q50: {cost_distribution['q50']:.0f} —Å–µ–∫")
        logger.info(f"   Q75: {cost_distribution['q75']:.0f} —Å–µ–∫")
        logger.info(f"   Q90: {cost_distribution['q90']:.0f} —Å–µ–∫")
        logger.info(f"   Q95: {cost_distribution['q95']:.0f} —Å–µ–∫")
        logger.info(f"   Q99: {cost_distribution['q99']:.0f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã
        unassignable_polygons = polygon_validator.get_unassignable_polygons(optimized_polygons)
        if unassignable_polygons:
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(unassignable_polygons)} –Ω–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
            optimized_polygons = polygon_validator.filter_assignable_polygons(optimized_polygons)
            logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(optimized_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(optimized_polygons)} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ä—Ç–∞–ª—ã –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤
        logger.info("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–ª–æ–≤ –ø–æ–ª–∏–≥–æ–Ω–æ–≤...")
        for row in optimized_polygons.iter_rows(named=True):
            mp_id = row['MpId']
            order_ids = row['order_ids']
            
            polygon_orders = orders_df.filter(pl.col('MpId') == mp_id)
            lats = polygon_orders['Lat'].to_list()
            longs = polygon_orders['Long'].to_list()
            
            portal_id = calculate_polygon_portal(conn, order_ids, lats, longs)
            
            optimized_polygons = optimized_polygons.with_columns(
                pl.when(pl.col('MpId') == mp_id)
                .then(pl.lit(portal_id))
                .otherwise(pl.col('portal_id'))
                .alias('portal_id')
            )
        
        logger.info("=== –®–∞–≥ 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∫—É—Ä—å–µ—Ä–∞–º ===")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        courier_service_times = {}
        
        with open(couriers_file, 'r') as f:
            couriers_data = json.load(f)
        
        for courier in couriers_data['Couriers']:
            courier_id = courier['ID']
            courier_service_times[courier_id] = {}
            
            if 'ServiceTimeInMps' in courier and courier['ServiceTimeInMps'] is not None:
                for mp_service in courier['ServiceTimeInMps']:
                    mp_id = mp_service['MpID']
                    service_time = mp_service['ServiceTime']
                    courier_service_times[courier_id][mp_id] = service_time
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è {len(courier_service_times)} –∫—É—Ä—å–µ—Ä–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        solver = AssignmentSolverFactory.create_solver(
            solver_type='reinforcement',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º RL –¥–ª—è –º–∏–∫—Ä–æ—Ç–µ—Å—Ç–∞
            distance_provider=distance_provider,
            warehouse_id=warehouse_info['ID'],
            courier_service_times=courier_service_times
        )
        
        # –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ 12 —á–∞—Å–æ–≤ (43200 —Å–µ–∫—É–Ω–¥)
        max_time_per_courier = 43200
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –∫—É—Ä—å–µ—Ä–∞–º
        assignment = solver.solve(optimized_polygons, couriers_df, max_time_per_courier=max_time_per_courier)
        
        logger.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ {sum(len(polygons) for polygons in assignment.values())} –ø–æ–ª–∏–≥–æ–Ω–æ–≤")
        
        logger.info("=== –®–∞–≥ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫—É—Ä—å–µ—Ä–æ–≤ ===")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∫—É—Ä—å–µ—Ä–æ–≤
        optimized_routes = optimize_courier_routes(
            assignment, 
            optimized_polygons, 
            conn,
            courier_service_times
        )
        
        logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(optimized_routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        
        logger.info("=== –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è ===")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        result = generate_solution(
            optimized_routes,
            optimized_polygons,
            orders_df,
            conn,
            "test_solution.json"
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===")
        logger.info(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result['saved']:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            
            stats = result['statistics']
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –ö—É—Ä—å–µ—Ä–æ–≤: {stats['total_couriers']}")
            logger.info(f"   –ó–∞–∫–∞–∑–æ–≤: {stats['assigned_orders']}/{stats['total_orders']} ({stats['assignment_rate']:.2%})")
            logger.info(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞: {stats.get('avg_route_time', 0):.0f} —Å–µ–∫")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ä—à—Ä—É—Ç–∞: {stats.get('max_route_time', 0)} —Å–µ–∫")
            logger.info(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats.get('total_route_time', 0)} —Å–µ–∫")
        else:
            logger.error("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            
            validation = result['validation']
            if validation['unassigned_orders']:
                logger.error(f"–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: {len(validation['unassigned_orders'])}")
            if validation['duplicate_orders']:
                logger.error(f"–î—É–±–ª–∏ –∑–∞–∫–∞–∑–æ–≤: {len(validation['duplicate_orders'])}")
            if validation['violations']:
                logger.error(f"–ù–∞—Ä—É—à–µ–Ω–∏—è: {validation['violations']}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        raise
    finally:
        total_time = time.time() - start_time
        logger.info(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")

if __name__ == "__main__":
    main()
