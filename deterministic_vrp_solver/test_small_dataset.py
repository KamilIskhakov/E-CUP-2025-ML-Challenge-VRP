#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∏–∫—Ä–æ—Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import sqlite3
import random
import polars as pl
from pathlib import Path

def create_microtest_dataset():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –º–∏–∫—Ä–æ—Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∏–∫—Ä–æ—Ç–µ—Å—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_data_dir = Path("test_data")
    test_data_dir.mkdir(exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open('../ml_ozon_logistic/ml_ozon_logistic_dataSetOrders.json', 'r') as f:
        orders_data = json.load(f)
    with open('../ml_ozon_logistic/ml_ozon_logistic_dataSetCouriers.json', 'r') as f:
        couriers_data = json.load(f)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    orders_df = pl.DataFrame(orders_data['Orders'])
    couriers_df = pl.DataFrame(couriers_data['Couriers'])
    
    print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(orders_df)} –∑–∞–∫–∞–∑–æ–≤, {len(couriers_df)} –∫—É—Ä—å–µ—Ä–æ–≤")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 300 –∑–∞–∫–∞–∑–æ–≤ –∏ 50 –∫—É—Ä—å–µ—Ä–æ–≤
    small_orders = orders_df.head(300)
    small_couriers = couriers_df.head(50)
    
    print(f"–ú–∏–∫—Ä–æ—Ç–µ—Å—Ç: {len(small_orders)} –∑–∞–∫–∞–∑–æ–≤, {len(small_couriers)} –∫—É—Ä—å–µ—Ä–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–æ–≤
    order_ids = small_orders['ID'].to_list()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –±–∞–∑—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π...")
    test_db_path = test_data_dir / "test_durations.sqlite"
    
    if test_db_path.exists():
        test_db_path.unlink()
    
    test_conn = sqlite3.connect(test_db_path)
    test_cursor = test_conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    test_cursor.execute("CREATE TABLE dists (f INTEGER, t INTEGER, d INTEGER)")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ç–æ—á–∫–∞–º–∏ (–≤–∫–ª—é—á–∞—è —Å–∫–ª–∞–¥)
    warehouse_id = 1
    all_points = [warehouse_id] + order_ids
    
    for from_id in all_points:
        for to_id in all_points:
            if from_id != to_id:
                # –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç 100 –¥–æ 1000 —Å–µ–∫—É–Ω–¥
                distance = random.randint(100, 1000)
                test_cursor.execute("INSERT INTO dists (f, t, d) VALUES (?, ?, ?)", 
                                  (from_id, to_id, distance))
    
    test_conn.commit()
    test_conn.close()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    small_orders_json = {"Orders": small_orders.to_dicts()}
    with open(test_data_dir / "test_orders.json", 'w') as f:
        json.dump(small_orders_json, f, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∫–ª–∞–¥–µ
    small_couriers_json = {
        "CourierTimeWork": {
            "TSStart": 28800,
            "TSEnd": 72000
        },
        "Warehouse": {
            "ID": 1,
            "Lat": 55.7558,
            "Long": 37.6176,
            "MpId": 0,
            "ServiceTime": 300
        },
        "Couriers": small_couriers.to_dicts()
    }
    with open(test_data_dir / "test_couriers.json", 'w') as f:
        json.dump(small_couriers_json, f, indent=2)
    
    print(f"‚úÖ –ú–∏–∫—Ä–æ—Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω:")
    print(f"  {len(small_orders)} –∑–∞–∫–∞–∑–æ–≤, {len(small_couriers)} –∫—É—Ä—å–µ—Ä–æ–≤")
    print(f"  –ë–∞–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {len(all_points)} —Ç–æ—á–µ–∫")
    
    return True

if __name__ == "__main__":
    create_microtest_dataset()
