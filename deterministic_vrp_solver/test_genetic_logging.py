#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
"""

import logging
import sqlite3
from polygon_optimizer import PolygonTSPSolver

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('genetic_algorithm.log', mode='w', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

def test_genetic_algorithm():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("../durations.sqlite")
    conn.execute("PRAGMA journal_mode=WAL")
    conn.execute("PRAGMA synchronous=NORMAL")
    conn.execute("PRAGMA cache_size=1000000")
    
    # –°–æ–∑–¥–∞–µ–º solver
    solver = PolygonTSPSolver(conn, max_exact_size=15, use_parallel=False)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª–∏–≥–æ–Ω —Å 8 —Ç–æ—á–∫–∞–º–∏ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞)
    test_order_ids = [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008]
    
    logger.info("üöÄ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    logger.info(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω: {len(test_order_ids)} —Ç–æ—á–µ–∫")
    logger.info(f"üìç –¢–æ—á–∫–∏: {test_order_ids}")
    
    # –†–µ—à–∞–µ–º TSP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    try:
        optimal_route, total_cost = solver.solve_tsp_dynamic(test_order_ids)
        
        logger.info("‚úÖ –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: {optimal_route}")
        logger.info(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞
        if len(optimal_route) == len(test_order_ids):
            logger.info("‚úÖ –í—Å–µ —Ç–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –º–∞—Ä—à—Ä—É—Ç")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤—Å–µ —Ç–æ—á–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã: {len(optimal_route)}/{len(test_order_ids)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ—á–µ–∫
        if len(set(optimal_route)) == len(optimal_route):
            logger.info("‚úÖ –í—Å–µ —Ç–æ—á–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è –ï—Å—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ—á–∫–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ: {e}")
    
    conn.close()
    logger.info("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

def test_multiple_polygons():
    """–¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    
    conn = sqlite3.connect("../durations.sqlite")
    conn.execute("PRAGMA journal_mode=WAL")
    conn.execute("PRAGMA synchronous=NORMAL")
    conn.execute("PRAGMA cache_size=1000000")
    
    solver = PolygonTSPSolver(conn, max_exact_size=15, use_parallel=False)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    test_polygons = [
        [1001, 1002, 1003],  # 3 —Ç–æ—á–∫–∏ - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω NN
        [1001, 1002, 1003, 1004, 1005],  # 5 —Ç–æ—á–µ–∫ - –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        [1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008],  # 8 —Ç–æ—á–µ–∫ - –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
    ]
    
    for i, polygon in enumerate(test_polygons):
        logger.info(f"\n{'='*60}")
        logger.info(f"üß™ –¢–µ—Å—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ {i+1}: {len(polygon)} —Ç–æ—á–µ–∫")
        logger.info(f"üìç –¢–æ—á–∫–∏: {polygon}")
        
        try:
            optimal_route, total_cost = solver.solve_tsp_dynamic(polygon)
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å={total_cost}, –º–∞—Ä—à—Ä—É—Ç={optimal_route}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    conn.close()

if __name__ == "__main__":
    logger.info("üß¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
    test_genetic_algorithm()
    
    # –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    test_multiple_polygons()
    
    logger.info("\nüìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'genetic_algorithm.log'")
