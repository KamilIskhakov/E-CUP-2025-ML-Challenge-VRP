#!/usr/bin/env python3
import nbformat as nbf

nb = nbf.v4.new_notebook()

# Header
nb.cells.append(nbf.v4.new_markdown_cell("""# –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –∫—É—Ä—å–µ—Ä–æ–≤

–°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Polars"""))

# Imports
nb.cells.append(nbf.v4.new_code_cell("""import polars as pl
import plotly.graph_objects as go
import plotly.express as px
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")"""))

# Data Loading
nb.cells.append(nbf.v4.new_code_cell("""# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

# Couriers
with open("ml_ozon_logistic/ml_ozon_logistic_dataSetCouriers.json", 'r') as f:
    couriers_data = json.load(f)
couriers_df = pl.DataFrame(couriers_data['Couriers'], orient="row")

logger.info(f"‚úÖ –ö—É—Ä—å–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(couriers_df)} –∑–∞–ø–∏—Å–µ–π")"""))

# Service Times Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
logger.info("=== –ê–ù–ê–õ–ò–ó –°–ï–†–í–ò–°–ù–´–• –í–†–ï–ú–ï–ù –ö–£–†–¨–ï–†–û–í ===")

# –°–æ–∑–¥–∞–µ–º DataFrame —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
service_times = []
for row in couriers_df.iter_rows(named=True):
    for service in row['ServiceTimeInMps']:
        service_times.append({
            'courier_id': row['ID'],
            'mp_id': service['MpID'],
            'service_time': service['ServiceTime']
        })

service_df = pl.DataFrame(service_times, orient="row")
logger.info(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω: {len(service_df)}")

# –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
polygon_avg_times = service_df.group_by('mp_id').agg([
    pl.col('service_time').mean().alias('avg_service_time'),
    pl.col('service_time').count().alias('courier_count')
])

logger.info(f"üèòÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(polygon_avg_times)}")

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
comparison_df = service_df.join(polygon_avg_times, on='mp_id', how='left')

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ —Å—Ä–µ–¥–Ω–∏–º
comparison_df = comparison_df.with_columns([
    (pl.col('service_time') < pl.col('avg_service_time')).alias('faster_than_avg'),
    (pl.col('service_time') == pl.col('avg_service_time')).alias('equal_to_avg'),
    (pl.col('service_time') > pl.col('avg_service_time')).alias('slower_than_avg')
])

logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ —Å—Ä–µ–¥–Ω–∏–º")"""))

# Courier Performance Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—É—Ä—å–µ—Ä–æ–≤
logger.info("=== –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ö–£–†–¨–ï–†–û–í ===")

# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫—É—Ä—å–µ—Ä–∞–º
courier_performance = comparison_df.group_by('courier_id').agg([
    pl.col('faster_than_avg').sum().alias('faster_count'),
    pl.col('equal_to_avg').sum().alias('equal_count'),
    pl.col('slower_than_avg').sum().alias('slower_count'),
    pl.col('mp_id').n_unique().alias('total_polygons'),
    pl.col('service_time').mean().alias('avg_service_time'),
    pl.col('service_time').std().alias('std_service_time'),
    pl.col('service_time').min().alias('min_service_time'),
    pl.col('service_time').max().alias('max_service_time')
])

# –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
courier_performance = courier_performance.with_columns([
    (pl.col('faster_count') / pl.col('total_polygons') * 100).alias('faster_percentage'),
    (pl.col('slower_count') / pl.col('total_polygons') * 100).alias('slower_percentage')
])

logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—É—Ä—å–µ—Ä–∞–º:")
logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {courier_performance['faster_percentage'].mean():.1f}%")
logger.info(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {courier_performance['faster_percentage'].median():.1f}%")
logger.info(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {courier_performance['faster_percentage'].std():.1f}%")"""))

# Polygon Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º
logger.info("=== –ê–ù–ê–õ–ò–ó –ü–û –ü–û–õ–ò–ì–û–ù–ê–ú ===")

polygon_analysis = comparison_df.group_by('mp_id').agg([
    pl.col('faster_than_avg').sum().alias('faster_couriers'),
    pl.col('slower_than_avg').sum().alias('slower_couriers'),
    pl.col('courier_id').n_unique().alias('total_couriers'),
    pl.col('avg_service_time').first().alias('avg_service_time')
])

polygon_analysis = polygon_analysis.with_columns([
    (pl.col('faster_couriers') / pl.col('total_couriers') * 100).alias('faster_courier_percentage')
])

logger.info(f"üèòÔ∏è –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º:")
logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º: {polygon_analysis['avg_service_time'].mean():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º >200 —Å–µ–∫: {(polygon_analysis['avg_service_time'] > 200).sum()}")
logger.info(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º <100 —Å–µ–∫: {(polygon_analysis['avg_service_time'] < 100).sum()}")"""))

# Visualization 1: Heatmap - Service Time Matrix
nb.cells.append(nbf.v4.new_code_cell("""# 1. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –ú–∞—Ç—Ä–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º
logger.info("1. –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")

# –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-30 –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
top_couriers = courier_performance.sort('avg_service_time', descending=False).head(30)['courier_id'].to_list()
top_polygons = polygon_analysis.sort('avg_service_time', descending=False).head(30)['mp_id'].to_list()

# –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
heatmap_data = comparison_df.filter(
    pl.col('courier_id').is_in(top_couriers) & 
    pl.col('mp_id').is_in(top_polygons)
)

# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –ø–æ–ª–∏–≥–æ–Ω—ã
couriers = sorted(heatmap_data['courier_id'].unique().to_list())
polygons = sorted(heatmap_data['mp_id'].unique().to_list())

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
z_values = []
for courier in couriers:
    row = []
    for polygon in polygons:
        # –ù–∞–π—Ç–∏ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∫—É—Ä—å–µ—Ä-–ø–æ–ª–∏–≥–æ–Ω
        value = heatmap_data.filter(
            (pl.col('courier_id') == courier) & (pl.col('mp_id') == polygon)
        )
        if len(value) > 0:
            row.append(float(value['service_time'][0]))
        else:
            row.append(None)  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    z_values.append(row)

x_labels = [str(x) for x in polygons]
y_labels = [str(y) for y in couriers]

fig1 = go.Figure(data=go.Heatmap(
    z=z_values,
    x=x_labels,
    y=y_labels,
    colorscale='Viridis',
    text=z_values,
    texttemplate="%{text:.0f}",
    textfont={"size": 8},
    colorbar=dict(title="–í—Ä–µ–º—è (—Å–µ–∫)")
))
fig1.update_layout(
    title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –í—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º (—Å–µ–∫)<br>–¢–æ–ø-30 –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –ø–æ–ª–∏–≥–æ–Ω–æ–≤",
    xaxis_title="–ü–æ–ª–∏–≥–æ–Ω—ã",
    yaxis_title="–ö—É—Ä—å–µ—Ä—ã",
    width=800,
    height=600
)
fig1.show()"""))

# Visualization 2: Heatmap - Relative Performance Matrix
nb.cells.append(nbf.v4.new_code_cell("""# 2. –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤
logger.info("2. –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
# –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º –∏ –∫—É—Ä—å–µ—Ä–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
polygon_courier_matrix = comparison_df.group_by(['mp_id', 'courier_id']).agg([
    pl.col('service_time').first().alias('service_time'),
    pl.col('avg_service_time').first().alias('avg_service_time')
]).with_columns([
    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫—É—Ä—å–µ—Ä–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
    (pl.col('service_time') / pl.col('avg_service_time')).alias('relative_time')
])

# –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-25 –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—É—Ä—å–µ—Ä–æ–≤
top_polygons_by_couriers = comparison_df.group_by('mp_id').agg([
    pl.col('courier_id').n_unique().alias('courier_count')
]).sort('courier_count', descending=True).head(25)['mp_id'].to_list()

# –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-25 –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–∏–≥–æ–Ω–æ–≤
top_couriers_by_polygons = comparison_df.group_by('courier_id').agg([
    pl.col('mp_id').n_unique().alias('polygon_count')
]).sort('polygon_count', descending=True).head(25)['courier_id'].to_list()

# –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
matrix_data = polygon_courier_matrix.filter(
    pl.col('mp_id').is_in(top_polygons_by_couriers) & 
    pl.col('courier_id').is_in(top_couriers_by_polygons)
)

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –ø–æ–ª–∏–≥–æ–Ω—ã
couriers = sorted(matrix_data['courier_id'].unique().to_list())
polygons = sorted(matrix_data['mp_id'].unique().to_list())

# –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
z_values = []
for courier in couriers:
    row = []
    for polygon in polygons:
        # –ù–∞–π—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∫—É—Ä—å–µ—Ä-–ø–æ–ª–∏–≥–æ–Ω
        value = matrix_data.filter(
            (pl.col('courier_id') == courier) & (pl.col('mp_id') == polygon)
        )
        if len(value) > 0:
            row.append(float(value['relative_time'][0]))
        else:
            row.append(None)  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    z_values.append(row)

x_labels = [str(x) for x in polygons]
y_labels = [str(y) for y in couriers]

fig2 = go.Figure(data=go.Heatmap(
    z=z_values,
    x=x_labels,
    y=y_labels,
    colorscale='RdYlBu_r',
    text=z_values,
    texttemplate="%{text:.2f}",
    textfont={"size": 8},
    colorbar=dict(title="–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è<br>(1.0 = —Å—Ä–µ–¥–Ω–µ–µ)")
))
fig2.update_layout(
    title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—å–µ—Ä–æ–≤<br>(<1.0 –±—ã—Å—Ç—Ä–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, >1.0 –º–µ–¥–ª–µ–Ω–Ω–µ–µ —Å—Ä–µ–¥–Ω–µ–≥–æ)",
    xaxis_title="–ü–æ–ª–∏–≥–æ–Ω—ã",
    yaxis_title="–ö—É—Ä—å–µ—Ä—ã",
    width=800,
    height=600
)
fig2.show()"""))

# Visualization 3: Distribution of Average Service Time per Courier
nb.cells.append(nbf.v4.new_code_cell("""# 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—å–µ—Ä–æ–≤
logger.info("3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è...")

courier_avg_times = courier_performance.select('avg_service_time').to_series().to_list()

fig3 = go.Figure()
fig3.add_trace(go.Histogram(
    x=courier_avg_times,
    nbinsx=30,
    name='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
    marker_color='blue'
))
fig3.update_layout(
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
    xaxis_title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Å–µ–∫)",
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—å–µ—Ä–æ–≤",
    showlegend=False,
    plot_bgcolor='white'
)
fig3.show()"""))

# Visualization 4: Polygon Variability
nb.cells.append(nbf.v4.new_code_cell("""# 4. –¢–æ–ø-15 –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é
logger.info("4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é...")

polygon_variability = comparison_df.group_by('mp_id').agg([
    pl.col('service_time').std().alias('std_time'),
    pl.col('service_time').mean().alias('mean_time'),
    pl.col('courier_id').n_unique().alias('courier_count')
])

polygon_variability = polygon_variability.with_columns([
    (pl.col('std_time') / pl.col('mean_time') * 100).alias('cv_percent')
])

top_variable = polygon_variability.sort('cv_percent', descending=True).head(15)

polygon_ids = top_variable.select('mp_id').to_series().to_list()
cv_values = top_variable.select('cv_percent').to_series().to_list()

fig4 = go.Figure()
fig4.add_trace(go.Bar(
    x=polygon_ids,
    y=cv_values,
    name='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (%)',
    marker_color='orange'
))
fig4.update_layout(
    title="–¢–æ–ø-15 –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –≤—Ä–µ–º–µ–Ω–∏ –∫—É—Ä—å–µ—Ä–æ–≤",
    xaxis_title="ID –ø–æ–ª–∏–≥–æ–Ω–∞",
    yaxis_title="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (%)",
    showlegend=False,
    plot_bgcolor='white'
)
fig4.show()"""))

# Visualization 5: Polygon Average Service Time Distribution
nb.cells.append(nbf.v4.new_code_cell("""# 5. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º
logger.info("5. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º...")

polygon_avg_times = polygon_analysis.select('avg_service_time').to_series().to_list()

fig5 = go.Figure()
fig5.add_trace(go.Histogram(
    x=polygon_avg_times,
    nbinsx=30,
    name='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
    marker_color='purple'
))
fig5.update_layout(
    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
    xaxis_title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—Å–µ–∫)",
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤",
    showlegend=False,
    plot_bgcolor='white'
)
fig5.show()

logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ 5 —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π!")"""))

# Summary Analysis
nb.cells.append(nbf.v4.new_code_cell("""# –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
logger.info("=== –°–í–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó ===")

logger.info(f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ –∫—É—Ä—å–µ—Ä–æ–≤: {len(courier_performance)}")
logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(polygon_analysis)}")
logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω: {len(service_df)}")

logger.info(f"\\nüöö –í–†–ï–ú–Ø –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ö–£–†–¨–ï–†–û–í:")
logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {courier_performance['avg_service_time'].mean():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {courier_performance['avg_service_time'].median():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {courier_performance['avg_service_time'].max():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {courier_performance['avg_service_time'].min():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {courier_performance['avg_service_time'].std():.1f} —Å–µ–∫")

logger.info(f"\\nüèòÔ∏è –í–†–ï–ú–Ø –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø –ü–û –ü–û–õ–ò–ì–û–ù–ê–ú:")
logger.info(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º: {polygon_analysis['avg_service_time'].mean():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º: {polygon_analysis['avg_service_time'].median():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–∏–≥–æ–Ω–µ: {polygon_analysis['avg_service_time'].max():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–∏–≥–æ–Ω–µ: {polygon_analysis['avg_service_time'].min():.1f} —Å–µ–∫")
logger.info(f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –ø–æ–ª–∏–≥–æ–Ω–∞–º: {polygon_analysis['avg_service_time'].std():.1f} —Å–µ–∫")

logger.info(f"\\nüìà –í–ê–†–ò–ê–¢–ò–í–ù–û–°–¢–¨:")
logger.info(f"   ‚Ä¢ –ö—É—Ä—å–µ—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º >300 —Å–µ–∫: {len(courier_performance.filter(pl.col('avg_service_time') > 300))}")
logger.info(f"   ‚Ä¢ –ö—É—Ä—å–µ—Ä–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º <60 —Å–µ–∫: {len(courier_performance.filter(pl.col('avg_service_time') < 60))}")
logger.info(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º >300 —Å–µ–∫: {len(polygon_analysis.filter(pl.col('avg_service_time') > 300))}")
logger.info(f"   ‚Ä¢ –ü–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º <60 —Å–µ–∫: {len(polygon_analysis.filter(pl.col('avg_service_time') < 60))}")"""))

# Save notebook
nbf.write(nb, 'courier_service_analysis.ipynb')
print("‚úÖ Jupyter notebook —Å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏ –∏ —Ç–µ–ø–ª–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω: courier_service_analysis.ipynb")
